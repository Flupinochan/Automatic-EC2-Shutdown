Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input Parameters Configuration
        Parameters:
          - LambdaName
          - LambdaIAMRoleName
          - LambdaIAMPolicyName
          - LambdaCloudWatchLogsName
          - EventBridgeStartEC2RuleName
          - EventBridgeStopEC2RuleName
          - EventBridgeRuleIAMRoleName
          - EventBridgeRuleIAMPolicyName
          - UseCronEC2Start
          - UseCronEC2Stop
          - CronEC2Start
          - CronEC2Stop

Parameters: 
  LambdaName:
    Type: String
    Default: "Automatic-EC2-Shutdown-Lambda"
  LambdaIAMRoleName:
    Type: String
    Default: "Automatic-EC2-Shutdown-Lambda-Role"
  LambdaIAMPolicyName:
    Type: String
    Default: "Automatic-EC2-Shutdown-Policy"
  LambdaCloudWatchLogsName:
    Type: String
    Default: "Automatic-EC2-Shutdown-Lambda-Logs"
  EventBridgeStartEC2RuleName:
    Type: String
    Default: "Automatic-EC2-Start-Rule"
  EventBridgeStopEC2RuleName:
    Type: String
    Default: "Automatic-EC2-Stop-Rule"
  EventBridgeRuleIAMRoleName:
    Type: String
    Default: "Automatic-EC2-Shutdown-EventBridge-Role"
  EventBridgeRuleIAMPolicyName:
    Type: String
    Default: "Automatic-EC2-Shutdown-Policy"
  UseCronEC2Start:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  UseCronEC2Stop:
    Type: String
    Default: False
    AllowedValues:
      - True
      - False
  # Start all EC2 every day at 09:00 JST
  CronEC2Start:
    Type: String
    Default: "cron(0 0 * * ? *)"
  # Stop all EC2 every day at 22:00 JST
  CronEC2Stop:
    Type: String
    Default: "cron(0 13 * * ? *)"



Conditions: 
  IsUseCronEC2Start: !Equals [ !Ref UseCronEC2Start, 'True' ]
  IsUseCronEC2Stop: !Equals [ !Ref UseCronEC2Stop, 'True' ]



Resources: 
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: "python3.12"
      Timeout: 900
      LoggingConfig:
        LogGroup: !Ref LambdaCloudWatchLogs
      Code:
        ZipFile: |
          import boto3
          ec2_client = boto3.client("ec2")
          def lambda_handler(event, context):
              try:
                  action = event["action"]
                  ec2_ids = ec2_describe(action)
                  if ec2_ids:
                      if action == "start":
                          ec2_start(ec2_ids)
                      elif action == "stop":
                          ec2_stop(ec2_ids)
              except:
                  print("lambda_handlerにて、エラーが発生しました")
          def ec2_describe(action):
              try:
                  if action == "start":
                      ec2_status = "stopped"
                  elif action == "stop":
                      ec2_status = "running"
                  ec2_ids = []
                  paginator = ec2_client.get_paginator("describe_instances")
                  response_iterator = paginator.paginate(
                      Filters=[
                          {
                              "Name": "instance-state-name",
                              "Values": [
                                  ec2_status,
                              ],
                          },
                      ],
                  )
                  for response in response_iterator:
                      for reservation in response["Reservations"]:
                          for instance in reservation["Instances"]:
                              ec2_ids.append(instance["InstanceId"])
                  return ec2_ids
              except:
                  print("ec2_describeにて、エラーが発生しました")
                  raise
          def ec2_start(ec2_ids):
              try:
                  ec2_client.start_instances(InstanceIds=ec2_ids)
              except:
                  print("ec2_startにて、エラーが発生しました")
                  raise
          def ec2_stop(ec2_ids):
              try:
                  ec2_client.stop_instances(InstanceIds=ec2_ids)
              except:
                  print("ec2_stopにて、エラーが発生しました")
                  raise
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Ref LambdaIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource:
                  - "*"
  LambdaCloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LambdaCloudWatchLogsName
      LogGroupClass: "INFREQUENT_ACCESS"
      RetentionInDays: 1

  EventBridgeStartEC2Rule:
    Type: AWS::Events::Rule
    Condition: IsUseCronEC2Start
    Properties:
      Name: !Ref EventBridgeStartEC2RuleName
      EventBusName: "default"
      State: "ENABLED"
      ScheduleExpression: !Ref CronEC2Start
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: Lambda
          RoleArn: !GetAtt EventBridgeRuleIAMRole.Arn
          Input:
            !Sub |
              {
                "action": "start"
              } 
  EventBridgeStopEC2Rule:
    Type: AWS::Events::Rule
    Condition: IsUseCronEC2Stop
    Properties:
      Name: !Ref EventBridgeStopEC2RuleName
      EventBusName: "default"
      State: "ENABLED"
      ScheduleExpression: !Ref CronEC2Stop
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: Lambda
          RoleArn: !GetAtt EventBridgeRuleIAMRole.Arn
          Input:
            !Sub |
              {
                "action": "stop"
              } 
  EventBridgeRuleIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EventBridgeRuleIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - events.amazonaws.com
      Policies:
        - PolicyName: !Ref EventBridgeRuleIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt Lambda.Arn